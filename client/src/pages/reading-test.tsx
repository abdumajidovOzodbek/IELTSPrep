import { useState } from "react";
import { useParams } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import TestHeader from "@/components/test-header";
import TestNavigation from "@/components/test-navigation";
import QuestionPanel from "@/components/question-panel";
import { useTestSession } from "@/hooks/use-test-session";
import { Card, CardContent } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";

export default function ReadingTest() {
  const { sessionId } = useParams();
  const { session, updateSession } = useTestSession(sessionId);
  const [currentPassage, setCurrentPassage] = useState(0);
  const [answers, setAnswers] = useState<Record<string, any>>({});

  const { data: questions = [], isLoading } = useQuery({
    queryKey: ["/api/questions/reading"],
    queryFn: async () => {
      try {
        const response = await apiRequest("GET", "/api/questions/reading");
        return await response.json();
      } catch (error) {
        console.warn("Failed to load reading questions, using fallback");
        return [
          {
            id: "1",
            question: "According to the passage, what is the main cause of urban heat islands?",
            options: ["Energy usage", "Land surface modification", "Population growth", "Air pollution"],
            type: "multiple_choice"
          }
        ];
      }
    },
  });

  const submitAnswerMutation = useMutation({
    mutationFn: async (answerData: any) => {
      const response = await apiRequest("POST", "/api/answers", answerData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/sessions/${sessionId}/answers`] });
    }
  });

  const handleAnswerChange = (questionId: string, answer: any) => {
    setAnswers(prev => ({ ...prev, [questionId]: answer }));
    
    submitAnswerMutation.mutate({
      sessionId,
      questionId,
      answer,
      timeSpent: 0
    });
  };

  const handleNext = () => {
    // Move to next section
    updateSession({ currentSection: "writing" });
  };

  if (isLoading || !session) {
    return <div className="min-h-screen bg-slate-50 flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
        <p className="text-slate-600">Loading reading passages...</p>
      </div>
    </div>;
  }

  const samplePassage = `Urban heat islands are metropolitan areas that are significantly warmer than their surrounding rural areas. The temperature difference is usually larger at night than during the day, and is most apparent when winds are weak. Heat islands can affect communities by increasing summertime peak energy demand, air conditioning costs, air pollution, and heat-related illness and mortality.

The main cause of the urban heat island effect is from the modification of land surfaces. Waste heat generated by energy usage is a secondary contributor. As a population center grows, it tends to expand its area and increase its average temperature. The less-reflective and water-retentive properties of urban materials and the reduction in vegetation in urban areas, contribute to the effect.

Heat islands can be measured and described in several ways. Most accurately, air temperature is measured at a standard height above ground and sheltered from sun and wind. Surface temperatures can be measured by satellite data, which can provide information about temperature patterns across wide areas and at multiple times. Both measurement approaches have their advantages and are used to complement each other.`;

  return (
    <div className="min-h-screen bg-slate-50 flex flex-col">
      <TestHeader session={session} />
      
      <div className="flex flex-1">
        <TestNavigation currentSection="reading" sessionId={sessionId} />
        
        <main className="flex-1 p-6">
          <div className="max-w-7xl mx-auto">
            {/* Section Header */}
            <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6 mb-6">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h1 className="text-2xl font-bold text-slate-900">Reading Test</h1>
                  <p className="text-slate-600 mt-1">Passage 1 of 3 â€¢ Questions 1-13</p>
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-primary">45:20</div>
                  <div className="text-sm text-slate-600">Time remaining</div>
                </div>
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h3 className="font-semibold text-blue-900 mb-2">Instructions</h3>
                <p className="text-blue-800 text-sm">
                  Read the passage and answer the questions. You have 60 minutes for all three passages.
                </p>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Reading Passage */}
              <Card className="h-fit">
                <CardContent className="p-6">
                  <h3 className="text-lg font-semibold text-slate-900 mb-4">
                    Urban Heat Islands
                  </h3>
                  <ScrollArea className="h-96">
                    <div className="text-slate-900 leading-relaxed space-y-4">
                      {samplePassage.split('\n\n').map((paragraph, index) => (
                        <p key={index}>{paragraph}</p>
                      ))}
                    </div>
                  </ScrollArea>
                </CardContent>
              </Card>

              {/* Questions */}
              <div>
                <QuestionPanel
                  questions={questions}
                  currentQuestion={0}
                  answers={answers}
                  onAnswerChange={handleAnswerChange}
                  onNext={handleNext}
                  onPrevious={() => {}}
                  canGoNext={true}
                  canGoPrevious={false}
                  showPassageRef={true}
                />
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
